/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package libros;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Gabriela
 */
public class Crudusuarios extends javax.swing.JFrame {

    /**
     * Creates new form Crudusuarios
     */
    public Crudusuarios() {
        initComponents();
        cargarDatosUsuarios(); // Cargar los datos de los usuarios al iniciar la aplicación
    // Agregar un ListSelectionListener a la tabla usuarios
        usuarios.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

    @Override
    public void valueChanged(ListSelectionEvent e) {
        // Verificar si hay una fila seleccionada y actualizar los campos de texto
        if (!e.getValueIsAdjusting() && usuarios.getSelectedRow() != -1) {
            int filaSeleccionada = usuarios.getSelectedRow();
            Nombre.setText(usuarios.getValueAt(filaSeleccionada, 1).toString());
            Dirección.setText(usuarios.getValueAt(filaSeleccionada, 2).toString());
            Telefono.setText(usuarios.getValueAt(filaSeleccionada, 3).toString());
            Identificacion.setText(usuarios.getValueAt(filaSeleccionada, 4).toString());
           
        }
    }
});
 
     
    }
    
    
    
   private void cargarDatosUsuarios() {
    // Obtener el modelo de la tabla para actualizar los datos
    DefaultTableModel modeloTabla = (DefaultTableModel) usuarios.getModel();

    // Limpiar la tabla actual
    modeloTabla.setRowCount(0);

    // Establecer una conexión a la base de datos
    try {
        Connection conexion = Conexion.conectar(); // Suponiendo que tienes una clase Conexion con el método conectar()

        // Consulta SQL para obtener todos los usuarios
        String consultaSeleccion = "SELECT id, nombre, direccion, telefono, identificacion, contrasena FROM usuarios";
        PreparedStatement pstSeleccion = conexion.prepareStatement(consultaSeleccion);
        ResultSet rs = pstSeleccion.executeQuery();

        // Recorrer el ResultSet y agregar los datos a la tabla
        while (rs.next()) {
            int id = rs.getInt("id");
            String nombre = rs.getString("nombre");
            String direccion = rs.getString("direccion");
            String telefono = rs.getString("telefono");
            String identificacion = rs.getString("identificacion");
            String contrasena = rs.getString("contrasena");
            // No necesitamos obtener la contraseña para mostrarla en la tabla

            // Agregar una nueva fila al modelo de la tabla
            modeloTabla.addRow(new Object[]{id, nombre, direccion, telefono, identificacion, contrasena});
        }

        // Cerrar la conexión y el ResultSet
        rs.close();
        conexion.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar los datos de la tabla: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        limpiar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Identificacion = new javax.swing.JTextField();
        Nombre = new javax.swing.JTextField();
        Dirección = new javax.swing.JTextField();
        Telefono = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usuarios = new javax.swing.JTable();
        guardar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        modificar = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        eliminar = new javax.swing.JButton();
        Contrasena = new javax.swing.JPasswordField();
        salir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel4.setText("Telefono");

        limpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel5.setText("Contraseña");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel7.setText("Identificación");

        Identificacion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Identificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IdentificacionActionPerformed(evt);
            }
        });

        Nombre.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NombreActionPerformed(evt);
            }
        });

        Dirección.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Dirección.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DirecciónActionPerformed(evt);
            }
        });

        Telefono.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Telefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TelefonoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Usuarios");

        usuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Dirección", "Telefono", "Identificación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(usuarios);
        if (usuarios.getColumnModel().getColumnCount() > 0) {
            usuarios.getColumnModel().getColumn(3).setResizable(false);
        }

        guardar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel2.setText("Nombre");

        modificar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        modificar.setText("Modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel3.setText("Dirección");

        eliminar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        salir.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel2))
                .addGap(94, 94, 94)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(154, 154, 154)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Dirección, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                            .addComponent(Nombre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Telefono, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                            .addComponent(Identificacion, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Contrasena, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(guardar)
                        .addGap(18, 18, 18)
                        .addComponent(modificar)
                        .addGap(18, 18, 18)
                        .addComponent(eliminar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(limpiar)
                        .addGap(18, 18, 18)
                        .addComponent(salir)
                        .addGap(105, 105, 105)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 409, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Dirección, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(Telefono, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(Identificacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel5))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Contrasena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(guardar)
                            .addComponent(modificar)
                            .addComponent(eliminar))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(limpiar)
                            .addComponent(salir)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 344, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // Limpiar los campos del formulario
        Nombre.setText("");
        Dirección.setText("");
        Telefono.setText("");
        Identificacion.setText("");
        Contrasena.setText("");
       
    }//GEN-LAST:event_limpiarActionPerformed

    private void IdentificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IdentificacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IdentificacionActionPerformed

    private void NombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NombreActionPerformed

    private void DirecciónActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DirecciónActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_DirecciónActionPerformed

    private void TelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TelefonoActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
 // Obtener los datos ingresados por el usuario desde los campos del formulario
String nombre = Nombre.getText();
String direccion = Dirección.getText();
String telefono = Telefono.getText();
String identificacion = Identificacion.getText();
String contrasena = new String(Contrasena.getPassword());

// Establecer una conexión a la base de datos
try {
    Connection conexion = Conexion.conectar(); // clase Conexion con el método conectar()

    // Consulta SQL para verificar si la identificación ya existe
    String consultaVerificacion = "SELECT * FROM usuarios WHERE identificacion = ?";
    PreparedStatement pstVerificacion = conexion.prepareStatement(consultaVerificacion);
    pstVerificacion.setString(1, identificacion);
    ResultSet rsVerificacion = pstVerificacion.executeQuery();

    if (rsVerificacion.next()) {
        JOptionPane.showMessageDialog(this, "Ya existe un usuario con esa identificación", "Error", JOptionPane.ERROR_MESSAGE);
    } else {
        // El usuario no existe, insertar un nuevo usuario
        String consultaInsercion = "INSERT INTO usuarios (nombre, direccion, telefono, identificacion, contrasena) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement pstInsercion = conexion.prepareStatement(consultaInsercion);
        pstInsercion.setString(1, nombre);
        pstInsercion.setString(2, direccion);
        pstInsercion.setString(3, telefono);
        pstInsercion.setString(4, identificacion);
        pstInsercion.setString(5, contrasena);

        int resultadoInsercion = pstInsercion.executeUpdate();

        if (resultadoInsercion > 0) {
            JOptionPane.showMessageDialog(this, "Usuario registrado exitosamente");
            
            // Limpiar los campos del formulario
            Nombre.setText("");
            Dirección.setText("");
            Telefono.setText("");
            Identificacion.setText("");
            Contrasena.setText(""); // Limpiar el campo de contraseña

            // Actualizar la tabla de usuarios
            cargarDatosUsuarios();
        } else {
            JOptionPane.showMessageDialog(this, "Error al registrar el usuario", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    rsVerificacion.close();
    conexion.close();
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, "Error al conectar a la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_guardarActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed

  // Obtener los datos ingresados por el usuario desde los campos del formulario
String nombre = Nombre.getText();
String direccion = Dirección.getText();
String telefono = Telefono.getText();
String identificacion = Identificacion.getText();
String contrasena = new String(Contrasena.getPassword());

// Establecer una conexión a la base de datos
try {
    Connection conexion = Conexion.conectar(); // clase Conexion con el método conectar()

    // Consulta SQL para actualizar los datos del usuario
    String consultaActualizacion = "UPDATE usuarios SET nombre = ?, direccion = ?, telefono = ?, contrasena = ? WHERE identificacion = ?";
    PreparedStatement pstActualizacion = conexion.prepareStatement(consultaActualizacion);
    pstActualizacion.setString(1, nombre);
    pstActualizacion.setString(2, direccion);
    pstActualizacion.setString(3, telefono);
    pstActualizacion.setString(4, contrasena);
    pstActualizacion.setString(5, identificacion);

    int resultadoActualizacion = pstActualizacion.executeUpdate();

    if (resultadoActualizacion > 0) {
        JOptionPane.showMessageDialog(this, "Datos del usuario actualizados exitosamente");

        // Limpiar los campos del formulario
        Nombre.setText("");
        Dirección.setText("");
        Telefono.setText("");
        Identificacion.setText("");
        Contrasena.setText(""); // Limpiar el campo de contraseña

        // Actualizar la tabla usuarios
        cargarDatosUsuarios(); // Llamar al método para actualizar la tabla
    } else {
        JOptionPane.showMessageDialog(this, "Error al actualizar los datos del usuario", "Error", JOptionPane.ERROR_MESSAGE);
    }

    conexion.close();
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, "Error al conectar a la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Por favor ingrese un número válido para la identificación del usuario", "Error", JOptionPane.ERROR_MESSAGE);
}

        
    }//GEN-LAST:event_modificarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
// Obtener la fila seleccionada
int filaSeleccionada = usuarios.getSelectedRow();

if (filaSeleccionada == -1) {
    JOptionPane.showMessageDialog(this, "Por favor seleccione un usuario de la tabla", "Error", JOptionPane.ERROR_MESSAGE);
    return;
}

// Obtener la identificación del usuario seleccionado
String identificacion = (String) usuarios.getValueAt(filaSeleccionada, 4); 

// Confirmar la eliminación
int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este usuario?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

if (confirmacion == JOptionPane.YES_OPTION) {
    // Establecer una conexión a la base de datos
    try {
        Connection conexion = Conexion.conectar(); // clase Conexion con el método conectar()

        // Consulta SQL para eliminar el usuario
        String consultaEliminacion = "DELETE FROM usuarios WHERE identificacion = ?";
        PreparedStatement pstEliminacion = conexion.prepareStatement(consultaEliminacion);
        pstEliminacion.setString(1, identificacion);

        int resultadoEliminacion = pstEliminacion.executeUpdate();

        if (resultadoEliminacion > 0) {
            JOptionPane.showMessageDialog(this, "Usuario eliminado exitosamente");
            cargarDatosUsuarios(); // Actualizar la tabla después de la eliminación
        // Limpiar los campos del formulario
        Nombre.setText("");
        Dirección.setText("");
        Telefono.setText("");
        Identificacion.setText("");
        Contrasena.setText("");
            
        } else {
            JOptionPane.showMessageDialog(this, "Error al eliminar el usuario", "Error", JOptionPane.ERROR_MESSAGE);
        }

        conexion.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al conectar a la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    }//GEN-LAST:event_eliminarActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
     
// Cerrar la ventana actual
    this.dispose();

    }//GEN-LAST:event_salirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crudusuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crudusuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crudusuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crudusuarios.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Crudusuarios().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField Contrasena;
    private javax.swing.JTextField Dirección;
    private javax.swing.JTextField Identificacion;
    private javax.swing.JTextField Nombre;
    private javax.swing.JTextField Telefono;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    private javax.swing.JButton salir;
    private javax.swing.JTable usuarios;
    // End of variables declaration//GEN-END:variables
}
