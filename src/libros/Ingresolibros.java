/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package libros;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;


/**
 *
 * @author Gabriela
 */
public class Ingresolibros extends javax.swing.JFrame {
    
    
    
    /**
     * Creates new form Ingresolibros
     */
    public Ingresolibros() {
        initComponents();
        cargarDatosLibros(); // Cargar los datos de los libros al iniciar la aplicación
    
       // Agregar un ListSelectionListener a la tabla libros
        libros.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
          
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Verificar si hay una fila seleccionada y actualizar los campos de texto
                if (!e.getValueIsAdjusting() && libros.getSelectedRow() != -1) {
                    int filaSeleccionada = libros.getSelectedRow();
                    Isbn.setText(libros.getValueAt(filaSeleccionada, 0).toString());
                    Titulo.setText(libros.getValueAt(filaSeleccionada, 1).toString());
                    Autor.setText(libros.getValueAt(filaSeleccionada, 2).toString());
                    ano_publicacion.setText(libros.getValueAt(filaSeleccionada, 3).toString());
                    Editorial.setText(libros.getValueAt(filaSeleccionada, 4).toString());
                    Genero.setText(libros.getValueAt(filaSeleccionada, 5).toString());
                    Cantidad.setText(libros.getValueAt(filaSeleccionada, 6).toString());
                }
            }
        });
    
        
        
    }
    
    


private void cargarDatosLibros() {
    // Obtener el modelo de la tabla para actualizar los datos
    DefaultTableModel modeloTabla = (DefaultTableModel) libros.getModel();

    // Limpiar la tabla actual
    modeloTabla.setRowCount(0);

    // Establecer una conexión a la base de datos
    try {
        Connection conexion = Conexion.conectar(); // Suponiendo que tienes una clase Conexion con el método conectar()

        // Consulta SQL para obtener todos los libros
        String consultaSeleccion = "SELECT * FROM libros";
        PreparedStatement pstSeleccion = conexion.prepareStatement(consultaSeleccion);
        ResultSet rs = pstSeleccion.executeQuery();

        // Recorrer el ResultSet y agregar los datos a la tabla
        while (rs.next()) {
            String isbn = rs.getString("isbn");
            String titulo = rs.getString("titulo");
            String autor = rs.getString("autor");
            int anoPublicacion = rs.getInt("ano_publicacion");
            String editorial = rs.getString("editorial");
            String genero = rs.getString("genero");
            int cantidadDisponible = rs.getInt("cantidad_disponible");

            // Agregar una nueva fila al modelo de la tabla
            modeloTabla.addRow(new Object[]{isbn, titulo, autor, anoPublicacion, editorial, genero, cantidadDisponible});
        }

        // Cerrar la conexión y el ResultSet
        rs.close();
        conexion.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar los datos de la tabla: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        libros = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        Isbn = new javax.swing.JTextField();
        Titulo = new javax.swing.JTextField();
        Autor = new javax.swing.JTextField();
        Editorial = new javax.swing.JTextField();
        Genero = new javax.swing.JTextField();
        guardar = new javax.swing.JButton();
        modificar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        limpiar = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        ano_publicacion = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        Cantidad = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Registro de libros");

        libros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ISBN", "Titulo", "Autor", "Año", "Editorial", "Genero", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(libros);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel2.setText("ISBN");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel3.setText("Titulo");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel4.setText("Autor");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel5.setText("Editorial");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel6.setText("Genero");

        Isbn.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Isbn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IsbnActionPerformed(evt);
            }
        });

        Titulo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Titulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TituloActionPerformed(evt);
            }
        });

        Autor.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Autor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AutorActionPerformed(evt);
            }
        });

        Editorial.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Editorial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditorialActionPerformed(evt);
            }
        });

        Genero.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Genero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeneroActionPerformed(evt);
            }
        });

        guardar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        modificar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        modificar.setText("Modificar");
        modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarActionPerformed(evt);
            }
        });

        eliminar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        eliminar.setText("Eliminar");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        limpiar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel7.setText("Año");

        ano_publicacion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        ano_publicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ano_publicacionActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel8.setText("Cantidad");

        Cantidad.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CantidadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Genero))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(Cantidad, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Editorial, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 60, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(guardar)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(limpiar)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(modificar)
                                        .addGap(18, 18, 18)
                                        .addComponent(eliminar))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(Isbn, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Titulo))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(Autor))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(ano_publicacion))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(Isbn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(Titulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(Autor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ano_publicacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(Editorial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(Genero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(Cantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardar)
                    .addComponent(modificar)
                    .addComponent(eliminar))
                .addGap(10, 10, 10)
                .addComponent(limpiar)
                .addGap(16, 16, 16))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void IsbnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IsbnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IsbnActionPerformed

    private void TituloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TituloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TituloActionPerformed

    private void AutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AutorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AutorActionPerformed

    private void EditorialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditorialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EditorialActionPerformed

    private void GeneroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeneroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GeneroActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
 // Obtener los datos ingresados por el usuario desde los campos del formulario
String isbn = Isbn.getText();
String titulo = Titulo.getText();
String autor = Autor.getText();
int anoPublicacion = Integer.parseInt(ano_publicacion.getText()); // Campo para el año de publicación
String editorial = Editorial.getText();
String genero = Genero.getText(); // Campo para el género
int cantidadDisponible = Integer.parseInt(Cantidad.getText()); // Convertir el texto a entero

// Establecer una conexión a la base de datos
try {
    Connection conexion = Conexion.conectar(); // clase Conexion con el método conectar()

    // Consulta SQL para verificar si el ISBN ya existe
    String consultaVerificacion = "SELECT cantidad_disponible FROM libros WHERE isbn = ?";
    PreparedStatement pstVerificacion = conexion.prepareStatement(consultaVerificacion);
    pstVerificacion.setString(1, isbn);
    ResultSet rsVerificacion = pstVerificacion.executeQuery();

    if (rsVerificacion.next()) {
        // El ISBN ya existe
        int cantidadExistente = rsVerificacion.getInt("cantidad_disponible");

        // Mostrar un cuadro de diálogo preguntando si desea agregar más cantidad
        int respuesta = JOptionPane.showConfirmDialog(this, "El libro ya existe. ¿Desea agregar más cantidad?", "Libro existente", JOptionPane.YES_NO_OPTION);

        if (respuesta == JOptionPane.YES_OPTION) {
            // Solicitar la cantidad adicional
            String cantidadAdicionalStr = JOptionPane.showInputDialog(this, "Ingrese la cantidad adicional:");
            try {
                int cantidadAdicional = Integer.parseInt(cantidadAdicionalStr);
                int nuevaCantidad = cantidadExistente + cantidadAdicional;

                // Actualizar la cantidad en la base de datos
                String consultaActualizacion = "UPDATE libros SET cantidad_disponible = ? WHERE isbn = ?";
                PreparedStatement pstActualizacion = conexion.prepareStatement(consultaActualizacion);
                pstActualizacion.setInt(1, nuevaCantidad);
                pstActualizacion.setString(2, isbn);
                pstActualizacion.executeUpdate();

                JOptionPane.showMessageDialog(this, "Cantidad actualizada exitosamente");
                cargarDatosLibros(); // Llamar al método para actualizar la tabla
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Por favor ingrese un número válido para la cantidad adicional", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    } else {
        // El ISBN no existe, insertar un nuevo libro
        String consultaInsercion = "INSERT INTO libros (isbn, titulo, autor, ano_publicacion, editorial, genero, cantidad_disponible) VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement pstInsercion = conexion.prepareStatement(consultaInsercion);
        pstInsercion.setString(1, isbn);
        pstInsercion.setString(2, titulo);
        pstInsercion.setString(3, autor);
        pstInsercion.setInt(4, anoPublicacion);
        pstInsercion.setString(5, editorial);
        pstInsercion.setString(6, genero);
        pstInsercion.setInt(7, cantidadDisponible);

        int resultadoInsercion = pstInsercion.executeUpdate();

        if (resultadoInsercion > 0) {
            JOptionPane.showMessageDialog(this, "Libro registrado exitosamente");
            cargarDatosLibros(); // Llamar al método para actualizar la tabla

            // Limpiar los campos del formulario
            Isbn.setText("");
            Titulo.setText("");
            Autor.setText("");
            ano_publicacion.setText("");
            Editorial.setText("");
            Genero.setText("");
            Cantidad.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "Error al registrar el libro", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    rsVerificacion.close();
    conexion.close();
} catch (SQLException e) {
    JOptionPane.showMessageDialog(this, "Error al conectar a la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
} catch (NumberFormatException e) {
    JOptionPane.showMessageDialog(this, "Por favor ingrese un número válido para la cantidad disponible", "Error", JOptionPane.ERROR_MESSAGE);
}
 
    }//GEN-LAST:event_guardarActionPerformed

    private void ano_publicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ano_publicacionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ano_publicacionActionPerformed

    private void CantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CantidadActionPerformed

    private void modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarActionPerformed
        
            // Obtener los datos ingresados por el usuario desde los campos del formulario
    String isbn = Isbn.getText();
    String titulo = Titulo.getText();
    String autor = Autor.getText();
    int anoPublicacion = Integer.parseInt(ano_publicacion.getText()); // Campo para el año de publicación
    String editorial = Editorial.getText();
    String genero = Genero.getText(); // Campo para el género
    int cantidadDisponible = Integer.parseInt(Cantidad.getText()); // Convertir el texto a entero

    // Establecer una conexión a la base de datos
    try {
        Connection conexion = Conexion.conectar(); // clase Conexion con el método conectar()

        // Consulta SQL para actualizar los datos del libro
        String consultaActualizacion = "UPDATE libros SET titulo = ?, autor = ?, ano_publicacion = ?, editorial = ?, genero = ?, cantidad_disponible = ? WHERE isbn = ?";
        PreparedStatement pstActualizacion = conexion.prepareStatement(consultaActualizacion);
        pstActualizacion.setString(1, titulo);
        pstActualizacion.setString(2, autor);
        pstActualizacion.setInt(3, anoPublicacion);
        pstActualizacion.setString(4, editorial);
        pstActualizacion.setString(5, genero);
        pstActualizacion.setInt(6, cantidadDisponible);
        pstActualizacion.setString(7, isbn);

        int resultadoActualizacion = pstActualizacion.executeUpdate();

        if (resultadoActualizacion > 0) {
            JOptionPane.showMessageDialog(this, "Datos del libro actualizados exitosamente");
            cargarDatosLibros(); // Llamar al método para actualizar la tabla
        } else {
            JOptionPane.showMessageDialog(this, "Error al actualizar los datos del libro", "Error", JOptionPane.ERROR_MESSAGE);
        }

        conexion.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al conectar a la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Por favor ingrese un número válido para el año de publicación o la cantidad disponible", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_modificarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
                                               
    // Obtener la fila seleccionada
    int filaSeleccionada = libros.getSelectedRow();

    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor seleccione un libro de la tabla", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtener el ISBN del libro seleccionado
    String isbn = (String) libros.getValueAt(filaSeleccionada, 0);

    // Confirmar la eliminación
    int confirmacion = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este libro?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

    if (confirmacion == JOptionPane.YES_OPTION) {
        // Establecer una conexión a la base de datos
        try {
            Connection conexion = Conexion.conectar(); // clase Conexion con el método conectar()

            // Consulta SQL para eliminar el libro
            String consultaEliminacion = "DELETE FROM libros WHERE isbn = ?";
            PreparedStatement pstEliminacion = conexion.prepareStatement(consultaEliminacion);
            pstEliminacion.setString(1, isbn);

            int resultadoEliminacion = pstEliminacion.executeUpdate();

            if (resultadoEliminacion > 0) {
                JOptionPane.showMessageDialog(this, "Libro eliminado exitosamente");
                cargarDatosLibros(); // Actualizar la tabla después de la eliminación
            } else {
                JOptionPane.showMessageDialog(this, "Error al eliminar el libro", "Error", JOptionPane.ERROR_MESSAGE);
            }

            conexion.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al conectar a la base de datos: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }


    }//GEN-LAST:event_eliminarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
       // Limpiar los campos del formulario
            Isbn.setText("");
            Titulo.setText("");
            Autor.setText("");
            ano_publicacion.setText("");
            Editorial.setText("");
            Genero.setText("");
            Cantidad.setText("");
    }//GEN-LAST:event_limpiarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ingresolibros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ingresolibros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ingresolibros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ingresolibros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ingresolibros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Autor;
    private javax.swing.JTextField Cantidad;
    private javax.swing.JTextField Editorial;
    private javax.swing.JTextField Genero;
    private javax.swing.JTextField Isbn;
    private javax.swing.JTextField Titulo;
    private javax.swing.JTextField ano_publicacion;
    private javax.swing.JButton eliminar;
    private javax.swing.JButton guardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable libros;
    private javax.swing.JButton limpiar;
    private javax.swing.JButton modificar;
    // End of variables declaration//GEN-END:variables



  
}
